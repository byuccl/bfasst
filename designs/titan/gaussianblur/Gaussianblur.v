// ==============================================================
// RTL generated by AutoESL - High-Level Synthesis System (C, C++, SystemC)
// Version: 2011.1
// Copyright (C) 2011 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Gaussianblur (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        V1_bus_req_din,
        V1_bus_req_full_n,
        V1_bus_req_write,
        V1_bus_rsp_dout,
        V1_bus_rsp_empty_n,
        V1_bus_rsp_read,
        V1_bus_address,
        V1_bus_datain,
        V1_bus_dataout,
        V1_bus_size,
        V2_bus_req_din,
        V2_bus_req_full_n,
        V2_bus_req_write,
        V2_bus_rsp_dout,
        V2_bus_rsp_empty_n,
        V2_bus_rsp_read,
        V2_bus_address,
        V2_bus_datain,
        V2_bus_dataout,
        V2_bus_size,
        std
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   V1_bus_req_din;
input   V1_bus_req_full_n;
output   V1_bus_req_write;
input   V1_bus_rsp_dout;
input   V1_bus_rsp_empty_n;
output   V1_bus_rsp_read;
output  [31:0] V1_bus_address;
input  [127:0] V1_bus_datain;
output  [127:0] V1_bus_dataout;
output  [31:0] V1_bus_size;
output   V2_bus_req_din;
input   V2_bus_req_full_n;
output   V2_bus_req_write;
input   V2_bus_rsp_dout;
input   V2_bus_rsp_empty_n;
output   V2_bus_rsp_read;
output  [31:0] V2_bus_address;
input  [127:0] V2_bus_datain;
output  [127:0] V2_bus_dataout;
output  [31:0] V2_bus_size;
input  [31:0] std;

reg ap_done;
reg ap_idle;
reg   [6:0] ap_CS_fsm;
wire   [31:0] grp_fu_226_p2;
reg   [31:0] reg_250;
wire   [31:0] grp_fu_235_p2;
reg   [31:0] reg_258;
wire   [31:0] grp_fu_220_p2;
reg   [31:0] reg_266;
wire   [31:0] grp_fu_245_p2;
reg   [31:0] tmp_5_reg_320;
reg   [31:0] nu_reg_325;
wire   [31:0] grp_fu_241_p2;
reg   [31:0] tmp_8_reg_333;
reg   [1:0] tmp_s_reg_341;
reg   [1:0] tmp_10_reg_349;
reg   [6:0] tmp_11_reg_357;
reg   [11:0] a0_address0;
reg    a0_ce0;
reg    a0_we0;
reg   [31:0] a0_d0;
wire   [31:0] a0_q0;
reg   [11:0] a0_address1;
reg    a0_ce1;
reg    a0_we1;
reg   [31:0] a0_d1;
wire   [31:0] a0_q1;
reg   [11:0] a1_address0;
reg    a1_ce0;
reg    a1_we0;
reg   [31:0] a1_d0;
wire   [31:0] a1_q0;
reg   [11:0] a1_address1;
reg    a1_ce1;
reg    a1_we1;
reg   [31:0] a1_d1;
wire   [31:0] a1_q1;
reg   [11:0] b0_address0;
reg    b0_ce0;
reg    b0_we0;
wire   [31:0] b0_d0;
wire   [31:0] b0_q0;
reg   [11:0] b0_address1;
reg    b0_ce1;
reg    b0_we1;
wire   [31:0] b0_d1;
wire   [31:0] b0_q1;
reg   [11:0] b1_address0;
reg    b1_ce0;
reg    b1_we0;
wire   [31:0] b1_d0;
wire   [31:0] b1_q0;
reg   [11:0] b1_address1;
reg    b1_ce1;
reg    b1_we1;
wire   [31:0] b1_d1;
wire   [31:0] b1_q1;
reg   [11:0] c0_address0;
reg    c0_ce0;
reg    c0_we0;
wire   [31:0] c0_d0;
wire   [31:0] c0_q0;
reg   [11:0] c0_address1;
reg    c0_ce1;
reg    c0_we1;
wire   [31:0] c0_d1;
wire   [31:0] c0_q1;
reg   [11:0] c1_address0;
reg    c1_ce0;
reg    c1_we0;
wire   [31:0] c1_d0;
wire   [31:0] c1_q0;
reg   [11:0] c1_address1;
reg    c1_ce1;
reg    c1_we1;
wire   [31:0] c1_d1;
wire   [31:0] c1_q1;
reg   [11:0] d0_address0;
reg    d0_ce0;
reg    d0_we0;
wire   [31:0] d0_d0;
wire   [31:0] d0_q0;
reg   [11:0] d0_address1;
reg    d0_ce1;
reg    d0_we1;
wire   [31:0] d0_d1;
wire   [31:0] d0_q1;
reg   [11:0] d1_address0;
reg    d1_ce0;
reg    d1_we0;
wire   [31:0] d1_d0;
wire   [31:0] d1_q0;
reg   [11:0] d1_address1;
reg    d1_ce1;
reg    d1_we1;
wire   [31:0] d1_d1;
wire   [31:0] d1_q1;
reg    grp_step0_fu_168_ap_start;
wire    grp_step0_fu_168_ap_done;
wire    grp_step0_fu_168_ap_idle;
wire   [1:0] grp_step0_fu_168_tag;
wire   [6:0] grp_step0_fu_168_counter;
wire   [11:0] grp_step0_fu_168_a_address0;
wire    grp_step0_fu_168_a_ce0;
wire    grp_step0_fu_168_a_we0;
wire   [31:0] grp_step0_fu_168_a_d0;
reg   [31:0] grp_step0_fu_168_a_q0;
wire   [11:0] grp_step0_fu_168_a_address1;
wire    grp_step0_fu_168_a_ce1;
wire    grp_step0_fu_168_a_we1;
wire   [31:0] grp_step0_fu_168_a_d1;
reg   [31:0] grp_step0_fu_168_a_q1;
wire   [11:0] grp_step0_fu_168_b_address0;
wire    grp_step0_fu_168_b_ce0;
wire    grp_step0_fu_168_b_we0;
wire   [31:0] grp_step0_fu_168_b_d0;
reg   [31:0] grp_step0_fu_168_b_q0;
wire   [11:0] grp_step0_fu_168_b_address1;
wire    grp_step0_fu_168_b_ce1;
wire    grp_step0_fu_168_b_we1;
wire   [31:0] grp_step0_fu_168_b_d1;
reg   [31:0] grp_step0_fu_168_b_q1;
wire   [31:0] grp_step0_fu_168_BoundryScale;
wire   [31:0] grp_step0_fu_168_nu;
reg    grp_step1_fu_180_ap_start;
wire    grp_step1_fu_180_ap_done;
wire    grp_step1_fu_180_ap_idle;
wire   [0:0] grp_step1_fu_180_step;
wire   [1:0] grp_step1_fu_180_tag;
wire   [6:0] grp_step1_fu_180_counter;
wire   [11:0] grp_step1_fu_180_c_address0;
wire    grp_step1_fu_180_c_ce0;
reg   [31:0] grp_step1_fu_180_c_q0;
wire   [11:0] grp_step1_fu_180_c_address1;
wire    grp_step1_fu_180_c_ce1;
reg   [31:0] grp_step1_fu_180_c_q1;
wire   [11:0] grp_step1_fu_180_b_address0;
wire    grp_step1_fu_180_b_ce0;
reg   [31:0] grp_step1_fu_180_b_q0;
wire   [11:0] grp_step1_fu_180_b_address1;
wire    grp_step1_fu_180_b_ce1;
reg   [31:0] grp_step1_fu_180_b_q1;
wire   [11:0] grp_step1_fu_180_d_address0;
wire    grp_step1_fu_180_d_ce0;
wire    grp_step1_fu_180_d_we0;
wire   [31:0] grp_step1_fu_180_d_d0;
wire   [11:0] grp_step1_fu_180_d_address1;
wire    grp_step1_fu_180_d_ce1;
wire    grp_step1_fu_180_d_we1;
wire   [31:0] grp_step1_fu_180_d_d1;
wire   [11:0] grp_step1_fu_180_c1_address0;
wire    grp_step1_fu_180_c1_ce0;
wire    grp_step1_fu_180_c1_we0;
wire   [31:0] grp_step1_fu_180_c1_d0;
wire   [11:0] grp_step1_fu_180_c1_address1;
wire    grp_step1_fu_180_c1_ce1;
wire    grp_step1_fu_180_c1_we1;
wire   [31:0] grp_step1_fu_180_c1_d1;
wire   [31:0] grp_step1_fu_180_BoundryScale;
wire   [31:0] grp_step1_fu_180_nu;
wire   [31:0] grp_step1_fu_180_PostScale;
reg    grp_write_r_fu_198_ap_start;
wire    grp_write_r_fu_198_ap_done;
wire    grp_write_r_fu_198_ap_idle;
wire   [1:0] grp_write_r_fu_198_tag;
wire   [6:0] grp_write_r_fu_198_counter;
wire   [11:0] grp_write_r_fu_198_d_address0;
wire    grp_write_r_fu_198_d_ce0;
reg   [31:0] grp_write_r_fu_198_d_q0;
wire   [11:0] grp_write_r_fu_198_d_address1;
wire    grp_write_r_fu_198_d_ce1;
reg   [31:0] grp_write_r_fu_198_d_q1;
wire    grp_write_r_fu_198_V_bus_req_din;
wire    grp_write_r_fu_198_V_bus_req_full_n;
wire    grp_write_r_fu_198_V_bus_req_write;
wire    grp_write_r_fu_198_V_bus_rsp_dout;
wire    grp_write_r_fu_198_V_bus_rsp_empty_n;
wire    grp_write_r_fu_198_V_bus_rsp_read;
wire   [31:0] grp_write_r_fu_198_V_bus_address;
wire   [127:0] grp_write_r_fu_198_V_bus_datain;
wire   [127:0] grp_write_r_fu_198_V_bus_dataout;
wire   [31:0] grp_write_r_fu_198_V_bus_size;
reg    grp_fetch_fu_209_ap_start;
wire    grp_fetch_fu_209_ap_done;
wire    grp_fetch_fu_209_ap_idle;
wire   [1:0] grp_fetch_fu_209_tag;
wire   [6:0] grp_fetch_fu_209_counter;
wire   [11:0] grp_fetch_fu_209_a_address0;
wire    grp_fetch_fu_209_a_ce0;
wire    grp_fetch_fu_209_a_we0;
wire   [31:0] grp_fetch_fu_209_a_d0;
wire   [11:0] grp_fetch_fu_209_a_address1;
wire    grp_fetch_fu_209_a_ce1;
wire    grp_fetch_fu_209_a_we1;
wire   [31:0] grp_fetch_fu_209_a_d1;
wire    grp_fetch_fu_209_V_bus_req_din;
wire    grp_fetch_fu_209_V_bus_req_full_n;
wire    grp_fetch_fu_209_V_bus_req_write;
wire    grp_fetch_fu_209_V_bus_rsp_dout;
wire    grp_fetch_fu_209_V_bus_rsp_empty_n;
wire    grp_fetch_fu_209_V_bus_rsp_read;
wire   [31:0] grp_fetch_fu_209_V_bus_address;
wire   [127:0] grp_fetch_fu_209_V_bus_datain;
wire   [127:0] grp_fetch_fu_209_V_bus_dataout;
wire   [31:0] grp_fetch_fu_209_V_bus_size;
reg   [1:0] i_reg_104;
reg   [31:0] PostScale_reg_115;
wire   [0:0] indvar_phi_fu_132_p4;
reg   [0:0] indvar_reg_127;
wire   [0:0] exitcond1_fu_274_p2;
wire   [0:0] exitcond_fu_286_p2;
reg   [1:0] tag_reg_141;
wire   [0:0] exitcond2_fu_298_p2;
reg   [6:0] counter_reg_153;
wire   [0:0] tmp_12_fu_310_p1;
reg   [31:0] grp_fu_220_p0;
reg   [31:0] grp_fu_220_p1;
reg   [31:0] grp_fu_226_p0;
reg   [31:0] grp_fu_226_p1;
reg   [31:0] grp_fu_235_p0;
reg   [31:0] grp_fu_235_p1;
wire   [31:0] grp_fu_241_p0;
wire   [31:0] grp_fu_241_p1;
wire   [31:0] grp_fu_245_p1;
reg   [1:0] grp_fu_220_opcode;
wire    grp_fu_220_ce;
reg    grp_fu_226_ce;
wire    grp_fu_235_ce;
wire    grp_fu_241_ce;
wire   [31:0] grp_fu_245_p0;
wire    grp_fu_245_ce;
reg   [6:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st0_fsm_0 = 7'b0000000;
parameter    ap_ST_st1_fsm_1 = 7'b0000001;
parameter    ap_ST_st2_fsm_2 = 7'b0000010;
parameter    ap_ST_st3_fsm_3 = 7'b0000011;
parameter    ap_ST_st4_fsm_4 = 7'b0000100;
parameter    ap_ST_st5_fsm_5 = 7'b0000101;
parameter    ap_ST_st6_fsm_6 = 7'b0000110;
parameter    ap_ST_st7_fsm_7 = 7'b0000111;
parameter    ap_ST_st8_fsm_8 = 7'b0001000;
parameter    ap_ST_st9_fsm_9 = 7'b0001001;
parameter    ap_ST_st10_fsm_10 = 7'b0001010;
parameter    ap_ST_st11_fsm_11 = 7'b0001011;
parameter    ap_ST_st12_fsm_12 = 7'b0001100;
parameter    ap_ST_st13_fsm_13 = 7'b0001101;
parameter    ap_ST_st14_fsm_14 = 7'b0001110;
parameter    ap_ST_st15_fsm_15 = 7'b0001111;
parameter    ap_ST_st16_fsm_16 = 7'b0010000;
parameter    ap_ST_st17_fsm_17 = 7'b0010001;
parameter    ap_ST_st18_fsm_18 = 7'b0010010;
parameter    ap_ST_st19_fsm_19 = 7'b0010011;
parameter    ap_ST_st20_fsm_20 = 7'b0010100;
parameter    ap_ST_st21_fsm_21 = 7'b0010101;
parameter    ap_ST_st22_fsm_22 = 7'b0010110;
parameter    ap_ST_st23_fsm_23 = 7'b0010111;
parameter    ap_ST_st24_fsm_24 = 7'b0011000;
parameter    ap_ST_st25_fsm_25 = 7'b0011001;
parameter    ap_ST_st26_fsm_26 = 7'b0011010;
parameter    ap_ST_st27_fsm_27 = 7'b0011011;
parameter    ap_ST_st28_fsm_28 = 7'b0011100;
parameter    ap_ST_st29_fsm_29 = 7'b0011101;
parameter    ap_ST_st30_fsm_30 = 7'b0011110;
parameter    ap_ST_st31_fsm_31 = 7'b0011111;
parameter    ap_ST_st32_fsm_32 = 7'b0100000;
parameter    ap_ST_st33_fsm_33 = 7'b0100001;
parameter    ap_ST_st34_fsm_34 = 7'b0100010;
parameter    ap_ST_st35_fsm_35 = 7'b0100011;
parameter    ap_ST_st36_fsm_36 = 7'b0100100;
parameter    ap_ST_st37_fsm_37 = 7'b0100101;
parameter    ap_ST_st38_fsm_38 = 7'b0100110;
parameter    ap_ST_st39_fsm_39 = 7'b0100111;
parameter    ap_ST_st40_fsm_40 = 7'b0101000;
parameter    ap_ST_st41_fsm_41 = 7'b0101001;
parameter    ap_ST_st42_fsm_42 = 7'b0101010;
parameter    ap_ST_st43_fsm_43 = 7'b0101011;
parameter    ap_ST_st44_fsm_44 = 7'b0101100;
parameter    ap_ST_st45_fsm_45 = 7'b0101101;
parameter    ap_ST_st46_fsm_46 = 7'b0101110;
parameter    ap_ST_st47_fsm_47 = 7'b0101111;
parameter    ap_ST_st48_fsm_48 = 7'b0110000;
parameter    ap_ST_st49_fsm_49 = 7'b0110001;
parameter    ap_ST_st50_fsm_50 = 7'b0110010;
parameter    ap_ST_st51_fsm_51 = 7'b0110011;
parameter    ap_ST_st52_fsm_52 = 7'b0110100;
parameter    ap_ST_st53_fsm_53 = 7'b0110101;
parameter    ap_ST_st54_fsm_54 = 7'b0110110;
parameter    ap_ST_st55_fsm_55 = 7'b0110111;
parameter    ap_ST_st56_fsm_56 = 7'b0111000;
parameter    ap_ST_st57_fsm_57 = 7'b0111001;
parameter    ap_ST_st58_fsm_58 = 7'b0111010;
parameter    ap_ST_st59_fsm_59 = 7'b0111011;
parameter    ap_ST_st60_fsm_60 = 7'b0111100;
parameter    ap_ST_st61_fsm_61 = 7'b0111101;
parameter    ap_ST_st62_fsm_62 = 7'b0111110;
parameter    ap_ST_st63_fsm_63 = 7'b0111111;
parameter    ap_ST_st64_fsm_64 = 7'b1000000;
parameter    ap_ST_st65_fsm_65 = 7'b1000001;
parameter    ap_ST_st66_fsm_66 = 7'b1000010;
parameter    ap_ST_st67_fsm_67 = 7'b1000011;
parameter    ap_ST_st68_fsm_68 = 7'b1000100;
parameter    ap_ST_st69_fsm_69 = 7'b1000101;
parameter    ap_ST_st70_fsm_70 = 7'b1000110;
parameter    ap_ST_st71_fsm_71 = 7'b1000111;
parameter    ap_ST_st72_fsm_72 = 7'b1001000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_3F800000 = 32'b00111111100000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_40800000 = 32'b01000000100000000000000000000000;
parameter    ap_const_lv32_40000000 = 32'b01000000000000000000000000000000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b01;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv7_43 = 7'b1000011;
parameter    ap_const_lv7_1 = 7'b0000001;
parameter    ap_const_lv32_1 = 32'b00000000000000000000000000000001;
parameter    ap_true = 1'b1;


Gaussianblur_a0 #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
a0_U(
    .clk( ap_clk ),
    .address0( a0_address0 ),
    .ce0( a0_ce0 ),
    .we0( a0_we0 ),
    .d0( a0_d0 ),
    .q0( a0_q0 ),
    .address1( a0_address1 ),
    .ce1( a0_ce1 ),
    .we1( a0_we1 ),
    .d1( a0_d1 ),
    .q1( a0_q1 )
);

Gaussianblur_a1 #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
a1_U(
    .clk( ap_clk ),
    .address0( a1_address0 ),
    .ce0( a1_ce0 ),
    .we0( a1_we0 ),
    .d0( a1_d0 ),
    .q0( a1_q0 ),
    .address1( a1_address1 ),
    .ce1( a1_ce1 ),
    .we1( a1_we1 ),
    .d1( a1_d1 ),
    .q1( a1_q1 )
);

Gaussianblur_b0 #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
b0_U(
    .clk( ap_clk ),
    .address0( b0_address0 ),
    .ce0( b0_ce0 ),
    .we0( b0_we0 ),
    .d0( b0_d0 ),
    .q0( b0_q0 ),
    .address1( b0_address1 ),
    .ce1( b0_ce1 ),
    .we1( b0_we1 ),
    .d1( b0_d1 ),
    .q1( b0_q1 )
);

Gaussianblur_b1 #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
b1_U(
    .clk( ap_clk ),
    .address0( b1_address0 ),
    .ce0( b1_ce0 ),
    .we0( b1_we0 ),
    .d0( b1_d0 ),
    .q0( b1_q0 ),
    .address1( b1_address1 ),
    .ce1( b1_ce1 ),
    .we1( b1_we1 ),
    .d1( b1_d1 ),
    .q1( b1_q1 )
);

Gaussianblur_c0 #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
c0_U(
    .clk( ap_clk ),
    .address0( c0_address0 ),
    .ce0( c0_ce0 ),
    .we0( c0_we0 ),
    .d0( c0_d0 ),
    .q0( c0_q0 ),
    .address1( c0_address1 ),
    .ce1( c0_ce1 ),
    .we1( c0_we1 ),
    .d1( c0_d1 ),
    .q1( c0_q1 )
);

Gaussianblur_c1 #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
c1_U(
    .clk( ap_clk ),
    .address0( c1_address0 ),
    .ce0( c1_ce0 ),
    .we0( c1_we0 ),
    .d0( c1_d0 ),
    .q0( c1_q0 ),
    .address1( c1_address1 ),
    .ce1( c1_ce1 ),
    .we1( c1_we1 ),
    .d1( c1_d1 ),
    .q1( c1_q1 )
);

Gaussianblur_d0 #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
d0_U(
    .clk( ap_clk ),
    .address0( d0_address0 ),
    .ce0( d0_ce0 ),
    .we0( d0_we0 ),
    .d0( d0_d0 ),
    .q0( d0_q0 ),
    .address1( d0_address1 ),
    .ce1( d0_ce1 ),
    .we1( d0_we1 ),
    .d1( d0_d1 ),
    .q1( d0_q1 )
);

Gaussianblur_d1 #(
    .DataWidth( 32 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
d1_U(
    .clk( ap_clk ),
    .address0( d1_address0 ),
    .ce0( d1_ce0 ),
    .we0( d1_we0 ),
    .d0( d1_d0 ),
    .q0( d1_q0 ),
    .address1( d1_address1 ),
    .ce1( d1_ce1 ),
    .we1( d1_we1 ),
    .d1( d1_d1 ),
    .q1( d1_q1 )
);

step0 grp_step0_fu_168(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_step0_fu_168_ap_start ),
    .ap_done( grp_step0_fu_168_ap_done ),
    .ap_idle( grp_step0_fu_168_ap_idle ),
    .tag( grp_step0_fu_168_tag ),
    .counter( grp_step0_fu_168_counter ),
    .a_address0( grp_step0_fu_168_a_address0 ),
    .a_ce0( grp_step0_fu_168_a_ce0 ),
    .a_we0( grp_step0_fu_168_a_we0 ),
    .a_d0( grp_step0_fu_168_a_d0 ),
    .a_q0( grp_step0_fu_168_a_q0 ),
    .a_address1( grp_step0_fu_168_a_address1 ),
    .a_ce1( grp_step0_fu_168_a_ce1 ),
    .a_we1( grp_step0_fu_168_a_we1 ),
    .a_d1( grp_step0_fu_168_a_d1 ),
    .a_q1( grp_step0_fu_168_a_q1 ),
    .b_address0( grp_step0_fu_168_b_address0 ),
    .b_ce0( grp_step0_fu_168_b_ce0 ),
    .b_we0( grp_step0_fu_168_b_we0 ),
    .b_d0( grp_step0_fu_168_b_d0 ),
    .b_q0( grp_step0_fu_168_b_q0 ),
    .b_address1( grp_step0_fu_168_b_address1 ),
    .b_ce1( grp_step0_fu_168_b_ce1 ),
    .b_we1( grp_step0_fu_168_b_we1 ),
    .b_d1( grp_step0_fu_168_b_d1 ),
    .b_q1( grp_step0_fu_168_b_q1 ),
    .BoundryScale( grp_step0_fu_168_BoundryScale ),
    .nu( grp_step0_fu_168_nu )
);

step1 grp_step1_fu_180(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_step1_fu_180_ap_start ),
    .ap_done( grp_step1_fu_180_ap_done ),
    .ap_idle( grp_step1_fu_180_ap_idle ),
    .step( grp_step1_fu_180_step ),
    .tag( grp_step1_fu_180_tag ),
    .counter( grp_step1_fu_180_counter ),
    .c_address0( grp_step1_fu_180_c_address0 ),
    .c_ce0( grp_step1_fu_180_c_ce0 ),
    .c_q0( grp_step1_fu_180_c_q0 ),
    .c_address1( grp_step1_fu_180_c_address1 ),
    .c_ce1( grp_step1_fu_180_c_ce1 ),
    .c_q1( grp_step1_fu_180_c_q1 ),
    .b_address0( grp_step1_fu_180_b_address0 ),
    .b_ce0( grp_step1_fu_180_b_ce0 ),
    .b_q0( grp_step1_fu_180_b_q0 ),
    .b_address1( grp_step1_fu_180_b_address1 ),
    .b_ce1( grp_step1_fu_180_b_ce1 ),
    .b_q1( grp_step1_fu_180_b_q1 ),
    .d_address0( grp_step1_fu_180_d_address0 ),
    .d_ce0( grp_step1_fu_180_d_ce0 ),
    .d_we0( grp_step1_fu_180_d_we0 ),
    .d_d0( grp_step1_fu_180_d_d0 ),
    .d_address1( grp_step1_fu_180_d_address1 ),
    .d_ce1( grp_step1_fu_180_d_ce1 ),
    .d_we1( grp_step1_fu_180_d_we1 ),
    .d_d1( grp_step1_fu_180_d_d1 ),
    .c1_address0( grp_step1_fu_180_c1_address0 ),
    .c1_ce0( grp_step1_fu_180_c1_ce0 ),
    .c1_we0( grp_step1_fu_180_c1_we0 ),
    .c1_d0( grp_step1_fu_180_c1_d0 ),
    .c1_address1( grp_step1_fu_180_c1_address1 ),
    .c1_ce1( grp_step1_fu_180_c1_ce1 ),
    .c1_we1( grp_step1_fu_180_c1_we1 ),
    .c1_d1( grp_step1_fu_180_c1_d1 ),
    .BoundryScale( grp_step1_fu_180_BoundryScale ),
    .nu( grp_step1_fu_180_nu ),
    .PostScale( grp_step1_fu_180_PostScale )
);

write_r grp_write_r_fu_198(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_write_r_fu_198_ap_start ),
    .ap_done( grp_write_r_fu_198_ap_done ),
    .ap_idle( grp_write_r_fu_198_ap_idle ),
    .tag( grp_write_r_fu_198_tag ),
    .counter( grp_write_r_fu_198_counter ),
    .d_address0( grp_write_r_fu_198_d_address0 ),
    .d_ce0( grp_write_r_fu_198_d_ce0 ),
    .d_q0( grp_write_r_fu_198_d_q0 ),
    .d_address1( grp_write_r_fu_198_d_address1 ),
    .d_ce1( grp_write_r_fu_198_d_ce1 ),
    .d_q1( grp_write_r_fu_198_d_q1 ),
    .V_bus_req_din( grp_write_r_fu_198_V_bus_req_din ),
    .V_bus_req_full_n( grp_write_r_fu_198_V_bus_req_full_n ),
    .V_bus_req_write( grp_write_r_fu_198_V_bus_req_write ),
    .V_bus_rsp_dout( grp_write_r_fu_198_V_bus_rsp_dout ),
    .V_bus_rsp_empty_n( grp_write_r_fu_198_V_bus_rsp_empty_n ),
    .V_bus_rsp_read( grp_write_r_fu_198_V_bus_rsp_read ),
    .V_bus_address( grp_write_r_fu_198_V_bus_address ),
    .V_bus_datain( grp_write_r_fu_198_V_bus_datain ),
    .V_bus_dataout( grp_write_r_fu_198_V_bus_dataout ),
    .V_bus_size( grp_write_r_fu_198_V_bus_size )
);

fetch grp_fetch_fu_209(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_fetch_fu_209_ap_start ),
    .ap_done( grp_fetch_fu_209_ap_done ),
    .ap_idle( grp_fetch_fu_209_ap_idle ),
    .tag( grp_fetch_fu_209_tag ),
    .counter( grp_fetch_fu_209_counter ),
    .a_address0( grp_fetch_fu_209_a_address0 ),
    .a_ce0( grp_fetch_fu_209_a_ce0 ),
    .a_we0( grp_fetch_fu_209_a_we0 ),
    .a_d0( grp_fetch_fu_209_a_d0 ),
    .a_address1( grp_fetch_fu_209_a_address1 ),
    .a_ce1( grp_fetch_fu_209_a_ce1 ),
    .a_we1( grp_fetch_fu_209_a_we1 ),
    .a_d1( grp_fetch_fu_209_a_d1 ),
    .V_bus_req_din( grp_fetch_fu_209_V_bus_req_din ),
    .V_bus_req_full_n( grp_fetch_fu_209_V_bus_req_full_n ),
    .V_bus_req_write( grp_fetch_fu_209_V_bus_req_write ),
    .V_bus_rsp_dout( grp_fetch_fu_209_V_bus_rsp_dout ),
    .V_bus_rsp_empty_n( grp_fetch_fu_209_V_bus_rsp_empty_n ),
    .V_bus_rsp_read( grp_fetch_fu_209_V_bus_rsp_read ),
    .V_bus_address( grp_fetch_fu_209_V_bus_address ),
    .V_bus_datain( grp_fetch_fu_209_V_bus_datain ),
    .V_bus_dataout( grp_fetch_fu_209_V_bus_dataout ),
    .V_bus_size( grp_fetch_fu_209_V_bus_size )
);

Gaussianblur_grp_fu_220_ACMP_faddfsub_30 #(
    .ID( 30 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Gaussianblur_grp_fu_220_ACMP_faddfsub_30_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_220_p0 ),
    .din1( grp_fu_220_p1 ),
    .opcode( grp_fu_220_opcode ),
    .ce( grp_fu_220_ce ),
    .dout( grp_fu_220_p2 )
);

Gaussianblur_grp_fu_226_ACMP_fmul_31 #(
    .ID( 31 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Gaussianblur_grp_fu_226_ACMP_fmul_31_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_226_p0 ),
    .din1( grp_fu_226_p1 ),
    .ce( grp_fu_226_ce ),
    .dout( grp_fu_226_p2 )
);

Gaussianblur_grp_fu_235_ACMP_fdiv_32 #(
    .ID( 32 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Gaussianblur_grp_fu_235_ACMP_fdiv_32_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_235_p0 ),
    .din1( grp_fu_235_p1 ),
    .ce( grp_fu_235_ce ),
    .dout( grp_fu_235_p2 )
);

Gaussianblur_grp_fu_241_ACMP_fdiv_33 #(
    .ID( 33 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Gaussianblur_grp_fu_241_ACMP_fdiv_33_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_241_p0 ),
    .din1( grp_fu_241_p1 ),
    .ce( grp_fu_241_ce ),
    .dout( grp_fu_241_p2 )
);

Gaussianblur_grp_fu_245_ACMP_fsqrt_34 #(
    .ID( 34 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Gaussianblur_grp_fu_245_ACMP_fsqrt_34_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_245_p0 ),
    .din1( grp_fu_245_p1 ),
    .ce( grp_fu_245_ce ),
    .dout( grp_fu_245_p2 )
);



/// ap_CS_fsm assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st67_fsm_67 == ap_CS_fsm)) begin
        PostScale_reg_115 <= grp_fu_226_p2;
    end else if ((ap_ST_st63_fsm_63 == ap_CS_fsm)) begin
        PostScale_reg_115 <= ap_const_lv32_3F800000;
    end
    if (((ap_ST_st69_fsm_69 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_286_p2))) begin
        counter_reg_153 <= ap_const_lv7_0;
    end else if ((((ap_ST_st72_fsm_72 == ap_CS_fsm) & ~((ap_const_logic_0 == grp_fetch_fu_209_ap_done) | (ap_const_logic_0 == grp_step0_fu_168_ap_done) | (ap_const_logic_0 == grp_step1_fu_180_ap_done) | (ap_const_logic_0 == grp_write_r_fu_198_ap_done))) | (~((ap_const_logic_0 == grp_fetch_fu_209_ap_done) | (ap_const_logic_0 == grp_step0_fu_168_ap_done) | (ap_const_logic_0 == grp_step1_fu_180_ap_done) | (ap_const_logic_0 == grp_write_r_fu_198_ap_done)) & (ap_ST_st71_fsm_71 == ap_CS_fsm)))) begin
        counter_reg_153 <= tmp_11_reg_357;
    end
    if ((ap_ST_st67_fsm_67 == ap_CS_fsm)) begin
        i_reg_104 <= tmp_s_reg_341;
    end else if ((ap_ST_st63_fsm_63 == ap_CS_fsm)) begin
        i_reg_104 <= ap_const_lv2_0;
    end
    if (((ap_ST_st69_fsm_69 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_286_p2))) begin
        indvar_reg_127 <= ap_const_lv1_1;
    end else if (((ap_ST_st64_fsm_64 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_274_p2))) begin
        indvar_reg_127 <= ap_const_lv1_0;
    end
    if ((ap_ST_st48_fsm_48 == ap_CS_fsm)) begin
        nu_reg_325 <= grp_fu_235_p2;
    end
    if (((ap_ST_st4_fsm_4 == ap_CS_fsm) | (ap_ST_st18_fsm_18 == ap_CS_fsm) | (ap_ST_st28_fsm_28 == ap_CS_fsm) | (ap_ST_st67_fsm_67 == ap_CS_fsm))) begin
        reg_250 <= grp_fu_226_p2;
    end
    if (((ap_ST_st14_fsm_14 == ap_CS_fsm) | (ap_ST_st63_fsm_63 == ap_CS_fsm))) begin
        reg_258 <= grp_fu_235_p2;
    end
    if (((ap_ST_st23_fsm_23 == ap_CS_fsm) | (ap_ST_st33_fsm_33 == ap_CS_fsm) | (ap_ST_st38_fsm_38 == ap_CS_fsm) | (ap_ST_st53_fsm_53 == ap_CS_fsm))) begin
        reg_266 <= grp_fu_220_p2;
    end
    if (((ap_ST_st68_fsm_68 == ap_CS_fsm) & (ap_const_lv1_0 == indvar_phi_fu_132_p4))) begin
        tag_reg_141 <= ap_const_lv2_0;
    end else if (((ap_ST_st70_fsm_70 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond2_fu_298_p2))) begin
        tag_reg_141 <= tmp_10_reg_349;
    end
    if ((ap_ST_st69_fsm_69 == ap_CS_fsm)) begin
        tmp_10_reg_349 <= (tag_reg_141 + ap_const_lv2_1);
    end
    if ((ap_ST_st70_fsm_70 == ap_CS_fsm)) begin
        tmp_11_reg_357 <= (counter_reg_153 + ap_const_lv7_1);
    end
    if ((ap_ST_st33_fsm_33 == ap_CS_fsm)) begin
        tmp_5_reg_320 <= grp_fu_245_p2;
    end
    if ((ap_ST_st63_fsm_63 == ap_CS_fsm)) begin
        tmp_8_reg_333 <= grp_fu_241_p2;
    end
    if ((ap_ST_st64_fsm_64 == ap_CS_fsm)) begin
        tmp_s_reg_341 <= (i_reg_104 + ap_const_lv2_1);
    end
end

/// a0_address0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_address0 or grp_fetch_fu_209_a_address0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a0_address0 = grp_fetch_fu_209_a_address0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a0_address0 = grp_step0_fu_168_a_address0;
    end else begin
        a0_address0 = grp_fetch_fu_209_a_address0;
    end
end

/// a0_address1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_address1 or grp_fetch_fu_209_a_address1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a0_address1 = grp_fetch_fu_209_a_address1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a0_address1 = grp_step0_fu_168_a_address1;
    end else begin
        a0_address1 = grp_fetch_fu_209_a_address1;
    end
end

/// a0_ce0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_ce0 or grp_fetch_fu_209_a_ce0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a0_ce0 = grp_fetch_fu_209_a_ce0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a0_ce0 = grp_step0_fu_168_a_ce0;
    end else begin
        a0_ce0 = ap_const_logic_0;
    end
end

/// a0_ce1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_ce1 or grp_fetch_fu_209_a_ce1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a0_ce1 = grp_fetch_fu_209_a_ce1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a0_ce1 = grp_step0_fu_168_a_ce1;
    end else begin
        a0_ce1 = ap_const_logic_0;
    end
end

/// a0_d0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_d0 or grp_fetch_fu_209_a_d0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a0_d0 = grp_fetch_fu_209_a_d0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a0_d0 = grp_step0_fu_168_a_d0;
    end else begin
        a0_d0 = grp_fetch_fu_209_a_d0;
    end
end

/// a0_d1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_d1 or grp_fetch_fu_209_a_d1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a0_d1 = grp_fetch_fu_209_a_d1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a0_d1 = grp_step0_fu_168_a_d1;
    end else begin
        a0_d1 = grp_fetch_fu_209_a_d1;
    end
end

/// a0_we0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_we0 or grp_fetch_fu_209_a_we0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a0_we0 = grp_fetch_fu_209_a_we0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a0_we0 = grp_step0_fu_168_a_we0;
    end else begin
        a0_we0 = ap_const_logic_0;
    end
end

/// a0_we1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_we1 or grp_fetch_fu_209_a_we1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a0_we1 = grp_fetch_fu_209_a_we1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a0_we1 = grp_step0_fu_168_a_we1;
    end else begin
        a0_we1 = ap_const_logic_0;
    end
end

/// a1_address0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_address0 or grp_fetch_fu_209_a_address0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a1_address0 = grp_fetch_fu_209_a_address0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a1_address0 = grp_step0_fu_168_a_address0;
    end else begin
        a1_address0 = grp_fetch_fu_209_a_address0;
    end
end

/// a1_address1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_address1 or grp_fetch_fu_209_a_address1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a1_address1 = grp_fetch_fu_209_a_address1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a1_address1 = grp_step0_fu_168_a_address1;
    end else begin
        a1_address1 = grp_fetch_fu_209_a_address1;
    end
end

/// a1_ce0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_ce0 or grp_fetch_fu_209_a_ce0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a1_ce0 = grp_fetch_fu_209_a_ce0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a1_ce0 = grp_step0_fu_168_a_ce0;
    end else begin
        a1_ce0 = ap_const_logic_0;
    end
end

/// a1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_ce1 or grp_fetch_fu_209_a_ce1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a1_ce1 = grp_fetch_fu_209_a_ce1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a1_ce1 = grp_step0_fu_168_a_ce1;
    end else begin
        a1_ce1 = ap_const_logic_0;
    end
end

/// a1_d0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_d0 or grp_fetch_fu_209_a_d0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a1_d0 = grp_fetch_fu_209_a_d0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a1_d0 = grp_step0_fu_168_a_d0;
    end else begin
        a1_d0 = grp_fetch_fu_209_a_d0;
    end
end

/// a1_d1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_d1 or grp_fetch_fu_209_a_d1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a1_d1 = grp_fetch_fu_209_a_d1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a1_d1 = grp_step0_fu_168_a_d1;
    end else begin
        a1_d1 = grp_fetch_fu_209_a_d1;
    end
end

/// a1_we0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_we0 or grp_fetch_fu_209_a_we0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a1_we0 = grp_fetch_fu_209_a_we0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a1_we0 = grp_step0_fu_168_a_we0;
    end else begin
        a1_we0 = ap_const_logic_0;
    end
end

/// a1_we1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_a_we1 or grp_fetch_fu_209_a_we1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        a1_we1 = grp_fetch_fu_209_a_we1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        a1_we1 = grp_step0_fu_168_a_we1;
    end else begin
        a1_we1 = ap_const_logic_0;
    end
end

/// ap_NS_fsm assign process. ///
always @ (ap_start or ap_CS_fsm or grp_step0_fu_168_ap_done or grp_step1_fu_180_ap_done or grp_write_r_fu_198_ap_done or grp_fetch_fu_209_ap_done or indvar_phi_fu_132_p4 or exitcond1_fu_274_p2 or exitcond_fu_286_p2 or exitcond2_fu_298_p2 or tmp_12_fu_310_p1)
begin
    if (((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & ~(ap_const_lv1_0 == tmp_12_fu_310_p1))) begin
        ap_NS_fsm = ap_ST_st72_fsm_72;
    end else if (((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & (ap_const_lv1_0 == tmp_12_fu_310_p1))) begin
        ap_NS_fsm = ap_ST_st71_fsm_71;
    end else if ((((ap_ST_st72_fsm_72 == ap_CS_fsm) & ~((ap_const_logic_0 == grp_fetch_fu_209_ap_done) | (ap_const_logic_0 == grp_step0_fu_168_ap_done) | (ap_const_logic_0 == grp_step1_fu_180_ap_done) | (ap_const_logic_0 == grp_write_r_fu_198_ap_done))) | (~((ap_const_logic_0 == grp_fetch_fu_209_ap_done) | (ap_const_logic_0 == grp_step0_fu_168_ap_done) | (ap_const_logic_0 == grp_step1_fu_180_ap_done) | (ap_const_logic_0 == grp_write_r_fu_198_ap_done)) & (ap_ST_st71_fsm_71 == ap_CS_fsm)) | ((ap_ST_st69_fsm_69 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_286_p2)))) begin
        ap_NS_fsm = ap_ST_st70_fsm_70;
    end else if (((ap_ST_st68_fsm_68 == ap_CS_fsm) & ~(ap_const_logic_1 == ap_start) & ~(ap_const_lv1_0 == indvar_phi_fu_132_p4))) begin
        ap_NS_fsm = ap_ST_st0_fsm_0;
    end else if ((((ap_ST_st70_fsm_70 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond2_fu_298_p2)) | ((ap_ST_st68_fsm_68 == ap_CS_fsm) & (ap_const_lv1_0 == indvar_phi_fu_132_p4)))) begin
        ap_NS_fsm = ap_ST_st69_fsm_69;
    end else if ((ap_ST_st66_fsm_66 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st67_fsm_67;
    end else if ((ap_ST_st65_fsm_65 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st66_fsm_66;
    end else if ((((ap_ST_st64_fsm_64 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_274_p2)) | ((ap_ST_st69_fsm_69 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_286_p2)))) begin
        ap_NS_fsm = ap_ST_st68_fsm_68;
    end else if (((ap_ST_st64_fsm_64 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_274_p2))) begin
        ap_NS_fsm = ap_ST_st65_fsm_65;
    end else if (((ap_ST_st67_fsm_67 == ap_CS_fsm) | (ap_ST_st63_fsm_63 == ap_CS_fsm))) begin
        ap_NS_fsm = ap_ST_st64_fsm_64;
    end else if ((ap_ST_st62_fsm_62 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st63_fsm_63;
    end else if ((ap_ST_st61_fsm_61 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st62_fsm_62;
    end else if ((ap_ST_st60_fsm_60 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st61_fsm_61;
    end else if ((ap_ST_st59_fsm_59 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st60_fsm_60;
    end else if ((ap_ST_st58_fsm_58 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st59_fsm_59;
    end else if ((ap_ST_st57_fsm_57 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st58_fsm_58;
    end else if ((ap_ST_st56_fsm_56 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st57_fsm_57;
    end else if ((ap_ST_st55_fsm_55 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st56_fsm_56;
    end else if ((ap_ST_st54_fsm_54 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st55_fsm_55;
    end else if ((ap_ST_st53_fsm_53 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st54_fsm_54;
    end else if ((ap_ST_st52_fsm_52 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st53_fsm_53;
    end else if ((ap_ST_st51_fsm_51 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st52_fsm_52;
    end else if ((ap_ST_st50_fsm_50 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st51_fsm_51;
    end else if ((ap_ST_st49_fsm_49 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st50_fsm_50;
    end else if ((ap_ST_st48_fsm_48 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st49_fsm_49;
    end else if ((ap_ST_st47_fsm_47 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st48_fsm_48;
    end else if ((ap_ST_st46_fsm_46 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st47_fsm_47;
    end else if ((ap_ST_st45_fsm_45 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st46_fsm_46;
    end else if ((ap_ST_st44_fsm_44 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st45_fsm_45;
    end else if ((ap_ST_st43_fsm_43 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st44_fsm_44;
    end else if ((ap_ST_st42_fsm_42 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st43_fsm_43;
    end else if ((ap_ST_st41_fsm_41 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st42_fsm_42;
    end else if ((ap_ST_st40_fsm_40 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st41_fsm_41;
    end else if ((ap_ST_st39_fsm_39 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st40_fsm_40;
    end else if ((ap_ST_st38_fsm_38 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st39_fsm_39;
    end else if ((ap_ST_st37_fsm_37 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st38_fsm_38;
    end else if ((ap_ST_st36_fsm_36 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st37_fsm_37;
    end else if ((ap_ST_st35_fsm_35 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st36_fsm_36;
    end else if ((ap_ST_st34_fsm_34 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st35_fsm_35;
    end else if ((ap_ST_st33_fsm_33 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st34_fsm_34;
    end else if ((ap_ST_st32_fsm_32 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st33_fsm_33;
    end else if ((ap_ST_st31_fsm_31 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st32_fsm_32;
    end else if ((ap_ST_st30_fsm_30 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st31_fsm_31;
    end else if ((ap_ST_st29_fsm_29 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st30_fsm_30;
    end else if ((ap_ST_st28_fsm_28 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st29_fsm_29;
    end else if ((ap_ST_st27_fsm_27 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st28_fsm_28;
    end else if ((ap_ST_st26_fsm_26 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st27_fsm_27;
    end else if ((ap_ST_st25_fsm_25 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st26_fsm_26;
    end else if ((ap_ST_st24_fsm_24 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st25_fsm_25;
    end else if ((ap_ST_st23_fsm_23 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st24_fsm_24;
    end else if ((ap_ST_st22_fsm_22 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st23_fsm_23;
    end else if ((ap_ST_st21_fsm_21 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st22_fsm_22;
    end else if ((ap_ST_st20_fsm_20 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st21_fsm_21;
    end else if ((ap_ST_st19_fsm_19 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st20_fsm_20;
    end else if ((ap_ST_st18_fsm_18 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st19_fsm_19;
    end else if ((ap_ST_st17_fsm_17 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st18_fsm_18;
    end else if ((ap_ST_st16_fsm_16 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st17_fsm_17;
    end else if ((ap_ST_st15_fsm_15 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st16_fsm_16;
    end else if ((ap_ST_st14_fsm_14 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st15_fsm_15;
    end else if ((ap_ST_st13_fsm_13 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st14_fsm_14;
    end else if ((ap_ST_st12_fsm_12 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st13_fsm_13;
    end else if ((ap_ST_st11_fsm_11 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st12_fsm_12;
    end else if ((ap_ST_st10_fsm_10 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st11_fsm_11;
    end else if ((ap_ST_st9_fsm_9 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st10_fsm_10;
    end else if ((ap_ST_st8_fsm_8 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st9_fsm_9;
    end else if ((ap_ST_st7_fsm_7 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st8_fsm_8;
    end else if ((ap_ST_st6_fsm_6 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st7_fsm_7;
    end else if ((ap_ST_st5_fsm_5 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st6_fsm_6;
    end else if ((ap_ST_st4_fsm_4 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st5_fsm_5;
    end else if ((ap_ST_st3_fsm_3 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st4_fsm_4;
    end else if ((ap_ST_st2_fsm_2 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st3_fsm_3;
    end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st2_fsm_2;
    end else if ((((ap_ST_st0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_start)) | ((ap_ST_st68_fsm_68 == ap_CS_fsm) & (ap_const_logic_1 == ap_start) & ~(ap_const_lv1_0 == indvar_phi_fu_132_p4)))) begin
        ap_NS_fsm = ap_ST_st1_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or indvar_phi_fu_132_p4)
begin
    if (((ap_ST_st68_fsm_68 == ap_CS_fsm) & ~(ap_const_lv1_0 == indvar_phi_fu_132_p4))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st0_fsm_0 == ap_CS_fsm)) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// b0_address0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_address0 or grp_step1_fu_180_b_address0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b0_address0 = grp_step1_fu_180_b_address0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b0_address0 = grp_step0_fu_168_b_address0;
    end else begin
        b0_address0 = grp_step1_fu_180_b_address0;
    end
end

/// b0_address1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_address1 or grp_step1_fu_180_b_address1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b0_address1 = grp_step1_fu_180_b_address1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b0_address1 = grp_step0_fu_168_b_address1;
    end else begin
        b0_address1 = grp_step1_fu_180_b_address1;
    end
end

/// b0_ce0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_ce0 or grp_step1_fu_180_b_ce0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b0_ce0 = grp_step1_fu_180_b_ce0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b0_ce0 = grp_step0_fu_168_b_ce0;
    end else begin
        b0_ce0 = ap_const_logic_0;
    end
end

/// b0_ce1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_ce1 or grp_step1_fu_180_b_ce1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b0_ce1 = grp_step1_fu_180_b_ce1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b0_ce1 = grp_step0_fu_168_b_ce1;
    end else begin
        b0_ce1 = ap_const_logic_0;
    end
end

/// b0_we0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_we0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b0_we0 = grp_step0_fu_168_b_we0;
    end else begin
        b0_we0 = ap_const_logic_0;
    end
end

/// b0_we1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_we1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b0_we1 = grp_step0_fu_168_b_we1;
    end else begin
        b0_we1 = ap_const_logic_0;
    end
end

/// b1_address0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_address0 or grp_step1_fu_180_b_address0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b1_address0 = grp_step1_fu_180_b_address0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b1_address0 = grp_step0_fu_168_b_address0;
    end else begin
        b1_address0 = grp_step1_fu_180_b_address0;
    end
end

/// b1_address1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_address1 or grp_step1_fu_180_b_address1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b1_address1 = grp_step1_fu_180_b_address1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b1_address1 = grp_step0_fu_168_b_address1;
    end else begin
        b1_address1 = grp_step1_fu_180_b_address1;
    end
end

/// b1_ce0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_ce0 or grp_step1_fu_180_b_ce0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b1_ce0 = grp_step1_fu_180_b_ce0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b1_ce0 = grp_step0_fu_168_b_ce0;
    end else begin
        b1_ce0 = ap_const_logic_0;
    end
end

/// b1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_ce1 or grp_step1_fu_180_b_ce1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        b1_ce1 = grp_step1_fu_180_b_ce1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b1_ce1 = grp_step0_fu_168_b_ce1;
    end else begin
        b1_ce1 = ap_const_logic_0;
    end
end

/// b1_we0 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_we0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b1_we0 = grp_step0_fu_168_b_we0;
    end else begin
        b1_we0 = ap_const_logic_0;
    end
end

/// b1_we1 assign process. ///
always @ (ap_CS_fsm or grp_step0_fu_168_b_we1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        b1_we1 = grp_step0_fu_168_b_we1;
    end else begin
        b1_we1 = ap_const_logic_0;
    end
end

/// c0_address0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c_address0 or grp_step1_fu_180_c1_address0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c0_address0 = grp_step1_fu_180_c1_address0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c0_address0 = grp_step1_fu_180_c_address0;
    end else begin
        c0_address0 = grp_step1_fu_180_c1_address0;
    end
end

/// c0_address1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c_address1 or grp_step1_fu_180_c1_address1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c0_address1 = grp_step1_fu_180_c1_address1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c0_address1 = grp_step1_fu_180_c_address1;
    end else begin
        c0_address1 = grp_step1_fu_180_c1_address1;
    end
end

/// c0_ce0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c_ce0 or grp_step1_fu_180_c1_ce0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c0_ce0 = grp_step1_fu_180_c1_ce0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c0_ce0 = grp_step1_fu_180_c_ce0;
    end else begin
        c0_ce0 = ap_const_logic_0;
    end
end

/// c0_ce1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c_ce1 or grp_step1_fu_180_c1_ce1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c0_ce1 = grp_step1_fu_180_c1_ce1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c0_ce1 = grp_step1_fu_180_c_ce1;
    end else begin
        c0_ce1 = ap_const_logic_0;
    end
end

/// c0_we0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c1_we0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c0_we0 = grp_step1_fu_180_c1_we0;
    end else begin
        c0_we0 = ap_const_logic_0;
    end
end

/// c0_we1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c1_we1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c0_we1 = grp_step1_fu_180_c1_we1;
    end else begin
        c0_we1 = ap_const_logic_0;
    end
end

/// c1_address0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c_address0 or grp_step1_fu_180_c1_address0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c1_address0 = grp_step1_fu_180_c1_address0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c1_address0 = grp_step1_fu_180_c_address0;
    end else begin
        c1_address0 = grp_step1_fu_180_c1_address0;
    end
end

/// c1_address1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c_address1 or grp_step1_fu_180_c1_address1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c1_address1 = grp_step1_fu_180_c1_address1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c1_address1 = grp_step1_fu_180_c_address1;
    end else begin
        c1_address1 = grp_step1_fu_180_c1_address1;
    end
end

/// c1_ce0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c_ce0 or grp_step1_fu_180_c1_ce0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c1_ce0 = grp_step1_fu_180_c1_ce0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c1_ce0 = grp_step1_fu_180_c_ce0;
    end else begin
        c1_ce0 = ap_const_logic_0;
    end
end

/// c1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c_ce1 or grp_step1_fu_180_c1_ce1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c1_ce1 = grp_step1_fu_180_c1_ce1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        c1_ce1 = grp_step1_fu_180_c_ce1;
    end else begin
        c1_ce1 = ap_const_logic_0;
    end
end

/// c1_we0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c1_we0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c1_we0 = grp_step1_fu_180_c1_we0;
    end else begin
        c1_we0 = ap_const_logic_0;
    end
end

/// c1_we1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_c1_we1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        c1_we1 = grp_step1_fu_180_c1_we1;
    end else begin
        c1_we1 = ap_const_logic_0;
    end
end

/// d0_address0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_address0 or grp_write_r_fu_198_d_address0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d0_address0 = grp_write_r_fu_198_d_address0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d0_address0 = grp_step1_fu_180_d_address0;
    end else begin
        d0_address0 = grp_write_r_fu_198_d_address0;
    end
end

/// d0_address1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_address1 or grp_write_r_fu_198_d_address1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d0_address1 = grp_write_r_fu_198_d_address1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d0_address1 = grp_step1_fu_180_d_address1;
    end else begin
        d0_address1 = grp_write_r_fu_198_d_address1;
    end
end

/// d0_ce0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_ce0 or grp_write_r_fu_198_d_ce0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d0_ce0 = grp_write_r_fu_198_d_ce0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d0_ce0 = grp_step1_fu_180_d_ce0;
    end else begin
        d0_ce0 = ap_const_logic_0;
    end
end

/// d0_ce1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_ce1 or grp_write_r_fu_198_d_ce1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d0_ce1 = grp_write_r_fu_198_d_ce1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d0_ce1 = grp_step1_fu_180_d_ce1;
    end else begin
        d0_ce1 = ap_const_logic_0;
    end
end

/// d0_we0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_we0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d0_we0 = grp_step1_fu_180_d_we0;
    end else begin
        d0_we0 = ap_const_logic_0;
    end
end

/// d0_we1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_we1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d0_we1 = grp_step1_fu_180_d_we1;
    end else begin
        d0_we1 = ap_const_logic_0;
    end
end

/// d1_address0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_address0 or grp_write_r_fu_198_d_address0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d1_address0 = grp_write_r_fu_198_d_address0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d1_address0 = grp_step1_fu_180_d_address0;
    end else begin
        d1_address0 = grp_write_r_fu_198_d_address0;
    end
end

/// d1_address1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_address1 or grp_write_r_fu_198_d_address1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d1_address1 = grp_write_r_fu_198_d_address1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d1_address1 = grp_step1_fu_180_d_address1;
    end else begin
        d1_address1 = grp_write_r_fu_198_d_address1;
    end
end

/// d1_ce0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_ce0 or grp_write_r_fu_198_d_ce0)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d1_ce0 = grp_write_r_fu_198_d_ce0;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d1_ce0 = grp_step1_fu_180_d_ce0;
    end else begin
        d1_ce0 = ap_const_logic_0;
    end
end

/// d1_ce1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_ce1 or grp_write_r_fu_198_d_ce1)
begin
    if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        d1_ce1 = grp_write_r_fu_198_d_ce1;
    end else if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d1_ce1 = grp_step1_fu_180_d_ce1;
    end else begin
        d1_ce1 = ap_const_logic_0;
    end
end

/// d1_we0 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_we0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d1_we0 = grp_step1_fu_180_d_we0;
    end else begin
        d1_we0 = ap_const_logic_0;
    end
end

/// d1_we1 assign process. ///
always @ (ap_CS_fsm or grp_step1_fu_180_d_we1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        d1_we1 = grp_step1_fu_180_d_we1;
    end else begin
        d1_we1 = ap_const_logic_0;
    end
end

/// grp_fetch_fu_209_ap_start assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_298_p2 or tmp_12_fu_310_p1)
begin
    if ((((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & (ap_const_lv1_0 == tmp_12_fu_310_p1)) | ((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & ~(ap_const_lv1_0 == tmp_12_fu_310_p1)))) begin
        grp_fetch_fu_209_ap_start = ap_const_logic_1;
    end else begin
        grp_fetch_fu_209_ap_start = ap_const_logic_0;
    end
end

/// grp_fu_220_opcode assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st34_fsm_34 == ap_CS_fsm) | (ap_ST_st49_fsm_49 == ap_CS_fsm))) begin
        grp_fu_220_opcode = ap_const_lv2_1;
    end else if (((ap_ST_st19_fsm_19 == ap_CS_fsm) | (ap_ST_st29_fsm_29 == ap_CS_fsm))) begin
        grp_fu_220_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_220_opcode = ap_const_lv2_1;
    end
end

/// grp_fu_220_p0 assign process. ///
always @ (ap_CS_fsm or reg_250 or reg_266)
begin
    if ((ap_ST_st49_fsm_49 == ap_CS_fsm)) begin
        grp_fu_220_p0 = ap_const_lv32_3F800000;
    end else if ((ap_ST_st34_fsm_34 == ap_CS_fsm)) begin
        grp_fu_220_p0 = reg_266;
    end else if (((ap_ST_st19_fsm_19 == ap_CS_fsm) | (ap_ST_st29_fsm_29 == ap_CS_fsm))) begin
        grp_fu_220_p0 = reg_250;
    end else begin
        grp_fu_220_p0 = ap_const_lv32_3F800000;
    end
end

/// grp_fu_220_p1 assign process. ///
always @ (ap_CS_fsm or tmp_5_reg_320 or nu_reg_325)
begin
    if ((ap_ST_st49_fsm_49 == ap_CS_fsm)) begin
        grp_fu_220_p1 = nu_reg_325;
    end else if ((ap_ST_st34_fsm_34 == ap_CS_fsm)) begin
        grp_fu_220_p1 = tmp_5_reg_320;
    end else if (((ap_ST_st19_fsm_19 == ap_CS_fsm) | (ap_ST_st29_fsm_29 == ap_CS_fsm))) begin
        grp_fu_220_p1 = ap_const_lv32_3F800000;
    end else begin
        grp_fu_220_p1 = ap_const_lv32_3F800000;
    end
end

/// grp_fu_226_ce assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_274_p2)
begin
    if (((ap_ST_st4_fsm_4 == ap_CS_fsm) | (ap_ST_st18_fsm_18 == ap_CS_fsm) | (ap_ST_st28_fsm_28 == ap_CS_fsm) | (ap_ST_st67_fsm_67 == ap_CS_fsm) | (ap_ST_st1_fsm_1 == ap_CS_fsm) | (ap_ST_st15_fsm_15 == ap_CS_fsm) | (ap_ST_st25_fsm_25 == ap_CS_fsm) | ((ap_ST_st64_fsm_64 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_274_p2)) | (ap_ST_st2_fsm_2 == ap_CS_fsm) | (ap_ST_st3_fsm_3 == ap_CS_fsm) | (ap_ST_st16_fsm_16 == ap_CS_fsm) | (ap_ST_st17_fsm_17 == ap_CS_fsm) | (ap_ST_st26_fsm_26 == ap_CS_fsm) | (ap_ST_st27_fsm_27 == ap_CS_fsm) | (ap_ST_st65_fsm_65 == ap_CS_fsm) | (ap_ST_st66_fsm_66 == ap_CS_fsm))) begin
        grp_fu_226_ce = ap_const_logic_1;
    end else begin
        grp_fu_226_ce = ap_const_logic_0;
    end
end

/// grp_fu_226_p0 assign process. ///
always @ (ap_CS_fsm or std or reg_258 or tmp_8_reg_333 or exitcond1_fu_274_p2)
begin
    if (((ap_ST_st64_fsm_64 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_274_p2))) begin
        grp_fu_226_p0 = tmp_8_reg_333;
    end else if (((ap_ST_st15_fsm_15 == ap_CS_fsm) | (ap_ST_st25_fsm_25 == ap_CS_fsm))) begin
        grp_fu_226_p0 = reg_258;
    end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        grp_fu_226_p0 = std;
    end else begin
        grp_fu_226_p0 = tmp_8_reg_333;
    end
end

/// grp_fu_226_p1 assign process. ///
always @ (ap_CS_fsm or std or PostScale_reg_115 or exitcond1_fu_274_p2)
begin
    if (((ap_ST_st64_fsm_64 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_274_p2))) begin
        grp_fu_226_p1 = PostScale_reg_115;
    end else if ((ap_ST_st25_fsm_25 == ap_CS_fsm)) begin
        grp_fu_226_p1 = ap_const_lv32_40000000;
    end else if ((ap_ST_st15_fsm_15 == ap_CS_fsm)) begin
        grp_fu_226_p1 = ap_const_lv32_40800000;
    end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        grp_fu_226_p1 = std;
    end else begin
        grp_fu_226_p1 = ap_const_lv32_40000000;
    end
end

/// grp_fu_235_p0 assign process. ///
always @ (ap_CS_fsm or reg_250 or reg_266)
begin
    if ((ap_ST_st54_fsm_54 == ap_CS_fsm)) begin
        grp_fu_235_p0 = ap_const_lv32_3F800000;
    end else if ((ap_ST_st39_fsm_39 == ap_CS_fsm)) begin
        grp_fu_235_p0 = reg_266;
    end else if ((ap_ST_st5_fsm_5 == ap_CS_fsm)) begin
        grp_fu_235_p0 = reg_250;
    end else begin
        grp_fu_235_p0 = ap_const_lv32_3F800000;
    end
end

/// grp_fu_235_p1 assign process. ///
always @ (ap_CS_fsm or reg_250 or reg_266)
begin
    if ((ap_ST_st54_fsm_54 == ap_CS_fsm)) begin
        grp_fu_235_p1 = reg_266;
    end else if ((ap_ST_st39_fsm_39 == ap_CS_fsm)) begin
        grp_fu_235_p1 = reg_250;
    end else if ((ap_ST_st5_fsm_5 == ap_CS_fsm)) begin
        grp_fu_235_p1 = ap_const_lv32_40000000;
    end else begin
        grp_fu_235_p1 = ap_const_lv32_40000000;
    end
end

/// grp_step0_fu_168_a_q0 assign process. ///
always @ (ap_CS_fsm or a0_q0 or a1_q0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_step0_fu_168_a_q0 = a0_q0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_step0_fu_168_a_q0 = a1_q0;
    end else begin
        grp_step0_fu_168_a_q0 = a1_q0;
    end
end

/// grp_step0_fu_168_a_q1 assign process. ///
always @ (ap_CS_fsm or a0_q1 or a1_q1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_step0_fu_168_a_q1 = a0_q1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_step0_fu_168_a_q1 = a1_q1;
    end else begin
        grp_step0_fu_168_a_q1 = a1_q1;
    end
end

/// grp_step0_fu_168_ap_start assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_298_p2 or tmp_12_fu_310_p1)
begin
    if ((((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & (ap_const_lv1_0 == tmp_12_fu_310_p1)) | ((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & ~(ap_const_lv1_0 == tmp_12_fu_310_p1)))) begin
        grp_step0_fu_168_ap_start = ap_const_logic_1;
    end else begin
        grp_step0_fu_168_ap_start = ap_const_logic_0;
    end
end

/// grp_step0_fu_168_b_q0 assign process. ///
always @ (ap_CS_fsm or b0_q0 or b1_q0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_step0_fu_168_b_q0 = b0_q0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_step0_fu_168_b_q0 = b1_q0;
    end else begin
        grp_step0_fu_168_b_q0 = b1_q0;
    end
end

/// grp_step0_fu_168_b_q1 assign process. ///
always @ (ap_CS_fsm or b0_q1 or b1_q1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_step0_fu_168_b_q1 = b0_q1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_step0_fu_168_b_q1 = b1_q1;
    end else begin
        grp_step0_fu_168_b_q1 = b1_q1;
    end
end

/// grp_step1_fu_180_ap_start assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_298_p2 or tmp_12_fu_310_p1)
begin
    if ((((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & (ap_const_lv1_0 == tmp_12_fu_310_p1)) | ((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & ~(ap_const_lv1_0 == tmp_12_fu_310_p1)))) begin
        grp_step1_fu_180_ap_start = ap_const_logic_1;
    end else begin
        grp_step1_fu_180_ap_start = ap_const_logic_0;
    end
end

/// grp_step1_fu_180_b_q0 assign process. ///
always @ (ap_CS_fsm or b0_q0 or b1_q0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_step1_fu_180_b_q0 = b1_q0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_step1_fu_180_b_q0 = b0_q0;
    end else begin
        grp_step1_fu_180_b_q0 = b1_q0;
    end
end

/// grp_step1_fu_180_b_q1 assign process. ///
always @ (ap_CS_fsm or b0_q1 or b1_q1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_step1_fu_180_b_q1 = b1_q1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_step1_fu_180_b_q1 = b0_q1;
    end else begin
        grp_step1_fu_180_b_q1 = b1_q1;
    end
end

/// grp_step1_fu_180_c_q0 assign process. ///
always @ (ap_CS_fsm or c0_q0 or c1_q0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_step1_fu_180_c_q0 = c1_q0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_step1_fu_180_c_q0 = c0_q0;
    end else begin
        grp_step1_fu_180_c_q0 = c1_q0;
    end
end

/// grp_step1_fu_180_c_q1 assign process. ///
always @ (ap_CS_fsm or c0_q1 or c1_q1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_step1_fu_180_c_q1 = c1_q1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_step1_fu_180_c_q1 = c0_q1;
    end else begin
        grp_step1_fu_180_c_q1 = c1_q1;
    end
end

/// grp_write_r_fu_198_ap_start assign process. ///
always @ (ap_CS_fsm or exitcond2_fu_298_p2 or tmp_12_fu_310_p1)
begin
    if ((((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & (ap_const_lv1_0 == tmp_12_fu_310_p1)) | ((ap_ST_st70_fsm_70 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond2_fu_298_p2) & ~(ap_const_lv1_0 == tmp_12_fu_310_p1)))) begin
        grp_write_r_fu_198_ap_start = ap_const_logic_1;
    end else begin
        grp_write_r_fu_198_ap_start = ap_const_logic_0;
    end
end

/// grp_write_r_fu_198_d_q0 assign process. ///
always @ (ap_CS_fsm or d0_q0 or d1_q0)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_write_r_fu_198_d_q0 = d0_q0;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_write_r_fu_198_d_q0 = d1_q0;
    end else begin
        grp_write_r_fu_198_d_q0 = d1_q0;
    end
end

/// grp_write_r_fu_198_d_q1 assign process. ///
always @ (ap_CS_fsm or d0_q1 or d1_q1)
begin
    if ((ap_ST_st72_fsm_72 == ap_CS_fsm)) begin
        grp_write_r_fu_198_d_q1 = d0_q1;
    end else if ((ap_ST_st71_fsm_71 == ap_CS_fsm)) begin
        grp_write_r_fu_198_d_q1 = d1_q1;
    end else begin
        grp_write_r_fu_198_d_q1 = d1_q1;
    end
end
assign V1_bus_address = grp_fetch_fu_209_V_bus_address;
assign V1_bus_dataout = grp_fetch_fu_209_V_bus_dataout;
assign V1_bus_req_din = grp_fetch_fu_209_V_bus_req_din;
assign V1_bus_req_write = grp_fetch_fu_209_V_bus_req_write;
assign V1_bus_rsp_read = grp_fetch_fu_209_V_bus_rsp_read;
assign V1_bus_size = grp_fetch_fu_209_V_bus_size;
assign V2_bus_address = grp_write_r_fu_198_V_bus_address;
assign V2_bus_dataout = grp_write_r_fu_198_V_bus_dataout;
assign V2_bus_req_din = grp_write_r_fu_198_V_bus_req_din;
assign V2_bus_req_write = grp_write_r_fu_198_V_bus_req_write;
assign V2_bus_rsp_read = grp_write_r_fu_198_V_bus_rsp_read;
assign V2_bus_size = grp_write_r_fu_198_V_bus_size;
assign b0_d0 = grp_step0_fu_168_b_d0;
assign b0_d1 = grp_step0_fu_168_b_d1;
assign b1_d0 = grp_step0_fu_168_b_d0;
assign b1_d1 = grp_step0_fu_168_b_d1;
assign c0_d0 = grp_step1_fu_180_c1_d0;
assign c0_d1 = grp_step1_fu_180_c1_d1;
assign c1_d0 = grp_step1_fu_180_c1_d0;
assign c1_d1 = grp_step1_fu_180_c1_d1;
assign d0_d0 = grp_step1_fu_180_d_d0;
assign d0_d1 = grp_step1_fu_180_d_d1;
assign d1_d0 = grp_step1_fu_180_d_d0;
assign d1_d1 = grp_step1_fu_180_d_d1;
assign exitcond1_fu_274_p2 = (i_reg_104 == ap_const_lv2_3? 1'b1: 1'b0);
assign exitcond2_fu_298_p2 = (counter_reg_153 == ap_const_lv7_43? 1'b1: 1'b0);
assign exitcond_fu_286_p2 = (tag_reg_141 == ap_const_lv2_2? 1'b1: 1'b0);
assign grp_fetch_fu_209_V_bus_datain = V1_bus_datain;
assign grp_fetch_fu_209_V_bus_req_full_n = V1_bus_req_full_n;
assign grp_fetch_fu_209_V_bus_rsp_dout = V1_bus_rsp_dout;
assign grp_fetch_fu_209_V_bus_rsp_empty_n = V1_bus_rsp_empty_n;
assign grp_fetch_fu_209_counter = counter_reg_153;
assign grp_fetch_fu_209_tag = tag_reg_141;
assign grp_fu_220_ce = ap_const_logic_1;
assign grp_fu_235_ce = ap_const_logic_1;
assign grp_fu_241_ce = ap_const_logic_1;
assign grp_fu_241_p0 = nu_reg_325;
assign grp_fu_241_p1 = reg_258;
assign grp_fu_245_ce = ap_const_logic_1;
assign grp_fu_245_p0 = ap_const_lv32_1;
assign grp_fu_245_p1 = reg_266;
assign grp_step0_fu_168_BoundryScale = reg_258;
assign grp_step0_fu_168_counter = counter_reg_153;
assign grp_step0_fu_168_nu = nu_reg_325;
assign grp_step0_fu_168_tag = tag_reg_141;
assign grp_step1_fu_180_BoundryScale = reg_258;
assign grp_step1_fu_180_PostScale = PostScale_reg_115;
assign grp_step1_fu_180_counter = counter_reg_153;
assign grp_step1_fu_180_nu = nu_reg_325;
assign grp_step1_fu_180_step = indvar_reg_127;
assign grp_step1_fu_180_tag = tag_reg_141;
assign grp_write_r_fu_198_V_bus_datain = V2_bus_datain;
assign grp_write_r_fu_198_V_bus_req_full_n = V2_bus_req_full_n;
assign grp_write_r_fu_198_V_bus_rsp_dout = V2_bus_rsp_dout;
assign grp_write_r_fu_198_V_bus_rsp_empty_n = V2_bus_rsp_empty_n;
assign grp_write_r_fu_198_counter = counter_reg_153;
assign grp_write_r_fu_198_tag = tag_reg_141;
assign indvar_phi_fu_132_p4 = indvar_reg_127;
assign tmp_12_fu_310_p1 = counter_reg_153[0:0];


endmodule //Gaussianblur

