""" Base class for error injection tools"""
import abc

from bfasst.tool import Tool
from bfasst.status import Status, ErrorInjectionStatus
from bfasst.bfasst_exception import BfasstException


class ErrorInjectionException(BfasstException):
    """Base class for all exceptions in the error injection package"""


class ErrorInjectionTool(Tool):
    """Base class for error injection tools"""

    success_status = Status(ErrorInjectionStatus.SUCCESS)

    def __init__(self, cwd, design, flow_args="") -> None:
        super().__init__(cwd, design)

        # Implementation options
        self.create_arg_parser("error", flow_args)

    def add_args(self):
        """Default arguments for all error injection tools"""

    # run_error_flows
    # If one or more error flows are specified with an error flow YAML,
    #   this function runs each of them and returns ([netlist_list], status),
    #   where:
    #     - [netlist list] is a list of paths to corrupted netlists generated by
    #       the error flows. e.x. if the YAML file specifies 2 flows, the netlist
    #       list will be [path_to_corrupt_netlist_1, path_to_corrupt_netlist_2]
    #     - status is a Status object from bfasst.status
    @abc.abstractmethod
    def run_error_flows(self):
        pass
